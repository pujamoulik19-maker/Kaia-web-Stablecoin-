contracts/ My Token.sol
  solidity
// SPDX-License- Identifies : 
pragna solidity . .820;
import "@ openzeppelin/contracts/ token/ERC20.sol";
contract MyToken is ERC20{
constructor (unit256 initial Supply) ERC20(
(" MyToken", "MTK") {-mint(msg.sender, initial Supply* 10 * decimals ());
                    }
} 
scripts/deploy.js
  Deployment script using Hardhat(or can adapt for Foundry/ Remix later)
const hre = require("hardhat")
asyncfunction main () {
  await hre.run (" compile");
const intial supply = 1000;
const MyToken = await hre.ethers.get ContractFactory("MyToken");
const token= await MyToken deploy ( initialsupply);
await token await for Deployment();
console.log ("MyToken deployed to;"await token.getAddress());
}
main ().catch((error)=>{
  console .error (error);
  process. exitCode = 1;
});
package.json
  This makes your repoNode.is project(for installing Hardhat + dependencies)
{
  "name": " defi-project"
  "version": " 1.0.0"
  "decription":" A simple DeFi dApp on Somnia Testnet".
  "main":" index.js",
  "scripts": {
" deploy":"npx hardhat run script/deploy.js--network SomniaTestnet"
},
"dependencies":{
" @nomicfoundation/hardhat-toolbox": "^5.0.0",
" @openzepplin/ contracts" : "^5.0.2",
  " hardhat":"^2.22.0"
}
}
hardhat.config.js
require("@nomic foundation/hardhat-toolbox");
module.export= {
solidity: "0.8.20"
network: {
SomniaTestnet: {
url: "http://dream-rpc.somnia.network",
CHAIN ID ; 50312
accounts : [process.env PRIVATE_KEY]
  }
  }
}

  







  
